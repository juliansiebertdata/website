{
  "hash": "448f8dd821c6d209189dec2cdb03bc9c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"New Horizons | Using WebR\"\ndescription: \"We will make WebR work to run R directly inside your browser.\"\nauthor:\n  - name: Julian Siebert\n    url: https://juliansiebertdata.github.io/website/ # (your website)\n    #orcid: 0000-0000-0000-0000 # (if available)\n    affiliation: Working Student @ Seedforward\n    #affiliation-url: https://seedforward.de/ # (company website)\ndate: 01-27-2024\ndate-modified: 01-27-2024\ncategories: [WebR, Quarto, R] # self-defined categories (hash tags)\ncitation: \n  url: https://juliansiebertdata.github.io/website/posts/2024-01-21-webR/webr.html\nimage: images/webR-vignette.png # (image of your blog post)\ndraft: false # setting this to `true` will prevent your post from appearing on your listing page until you're ready!\nsidebar: false\n#bibliography: references.bib\nreference-location: margin\ncitation-location: margin\ncitations-hover: true\n\nengine: knitr\nwebr: \n    channel-type: 'post-message'\n    packages: [\"dplyr\", \"ggplot2\", \"palmerpenguins\"]\nfilters:\n  - webr\n---\n\n\n# Run R inside your browser\n\n***\n\nIn this Blogpost I will show you how to use [WebR](https://docs.r-wasm.org/webr/latest/) inside your Quarto documents. WebR is a technology that allows us to run R directly inside our browser. This is a great way to share our analysis with others without the need to install R on their machine. They just need a browser and an internet connection. (It runs even on a smartphone)\n\nTo start and install WebR inside our Quarto document use the **very short** manual at the GitHub page of [Coatless Professor](https://github.com/coatless/quarto-webr).\n\nHe´s even writing a Book about WebR in Quarto right now which you can find [here](https://quarto-webr.thecoatlessprofessor.com/).\n\nOr you watch this Youtube Video from the Coatless Professor.\n\n::: {#vid-webr}\n\n\n{{< video https://www.youtube.com/watch?v=DoRR2S5lLvk&t=5s >}}\n\n\n\n\"WebR R in the Browser\" by the Coatless Professor.\n\n:::\n\n::: {.definitionbox}\n:::: {.definitionbox-header}\n::::: {.definitionbox-icon}\n:::::\nDefinition:\nWebR technology.\n::::\n> WebR uses a technology called [WebAssembly](https://webassembly.org/) to run R inside the browser. It´s basically a very fast and small virtual machine. Using this your browser sets up a instance of R and runs your code inside this instance. We will discuss Pros and Cons later.\n:::\n\n## Setup WebR in Quarto\n\nI recommend taking the steps above to install WebR in your Quarto project. While this Blog Post and the Video might become outdated, the GitHub page of the Coatless Professor will probably always be up to date. I will store the information here for the sake of completeness.\n\nFirst we need to install the quarto-webr extension for Quarto inside our Quarto Project. This step needs to be repeated for every Quarto Project you want to use WebR in. Run the following Code inside your **Terminal**.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nquarto add coatless/quarto-webr\n```\n:::\n\n\nNow we add the following lines to the YAML header of our Quarto document. Alternatively you can specify this in your \"_quarto.yml\" file to make WebR available for all documents inside your Quarto Project.\n\n```{.yaml filename=\"your_file.qmd\" eval=FALSE}\n---\nengine: knitr\nfilters:\n  - webr\n---\n```\n\nIf you followed the examples above you should be able to use the following code chunk to load the `mtcars` dataset and fit the `mpg` against the `wt` variable using base R.\n\n```{webr-r}\n\nfit <- lm(mpg ~ wt, data = mtcars)\n\nsummary(fit)\n\n```\n\n\n## Using Packages\n\nBeacause WebR uses a technology called [WebAssembly](https://webassembly.org/) you cannot simply use every package inside the R ecosystem easily. But you can have a look at the [WebR Package Repository](https://repo.r-wasm.org/) to see which packages are available.\n\nIf you want to use a package inside WebR it is as easy as adding the package name to the `webr` field in the YAML header of your Quarto document.\n\n```{.yaml filename=\"your_file.qmd\" eval=FALSE}\n---\nformat: html\nengine: knitr\nwebr: \n    packages: [\"dplyr\", \"ggplot2\"]\nfilters:\n  - webr\n---\n```\n\nYou could also use the `webr::install()` function to install packages inside your Quarto document. But the above method is to be preferred because it is faster and more reliable. [See here](https://quarto-webr.thecoatlessprofessor.com/qwebr-using-r-packages.html) for more information.\n\nBut if you want to use a package in only one code cell it can be more efficient to make a inline call like this.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwebr::install(\"dplyr\")\n```\n:::\n\n\nAnd then use the package in the next code cell.\n\n```{webr-r}\n\nlibrary(dplyr)\n\nglimpse(mtcars)\n\n```\n\n## Hiding and executing Code\n\nWebR provides a way to hide code cells and execute them later. This can be useful if you want to hide the code cells from the user to focus on the analysis or output.\n\nTherefor you specify a `quarto-webr` cell option called `context`. There are three different contexts available.\n\n| `quarto-webr` Context   | Quarto Cell Option | Description                                    |\n|-------------------------|--------------------|------------------------------------------------|\n| `interactive` (default) | `include: true`    | Show both code and results                     |\n| `output`                | `echo: false`      | Suppress showing code, but display the results |\n| `setup`                 | `include: false`   | Suppress showing both code and results         |\n\n:Context Options for WebR {#tbl-context}\n\nFor example you want to load packages and datasets in the background without showing to not distract the reader from the analysis.\n\n```{{webr-r}}\n#| context: setup\nwebr::install(\"palmerpenguins\")\nlibrary(palmerpenguins)\n```\n\n```{webr-r}\n\nglimpse(penguins)\n\n```\n\n### Include advise on how to execute code\n\nThis is how you can execute the Code inside the Code Cells provided by WebR. \n\n- Run selected code (Per Line execution):\n  - macOS: <kbd>⌘</kbd> + <kbd>↩/Return</kbd>\n  - Windows/Linux: <kbd>strg</kbd> + <kbd>↩/Enter</kbd>\n\n- To run the entire code cell, you can simply click the \"Run code\" button, or use the keyboard shortcut:\n  - <kbd>Shift</kbd> + <kbd>↩</kbd>\n\n\n## WebR RevealJS Slides\n\nWe can also embed a WebR RevealJS Slide inside a Quarto Website or other Quarto Documents. This is how we can do it.\n\n````html\n<style>\n.slide-deck {\n    border: 3px solid #dee2e6;\n    width: 100%;\n    height: 475px;\n}\n</style>\n\n<div>\n```{=html}\n<iframe class=\"slide-deck\" src=\"path/to/presentation/\"></iframe>\n```\n</div>\n````\n:::{.callout-important icon=\"false\"}\nDon´t embed an WebR Presentation inside a WebR Document. This will lead to strange behaviour. There should always be only one WebR instance per document.\n:::\n\n## Communication Channels\n\nWebR needs to communicate between the browser and the R instance. There are several available. Each with there own set of advantages and disadvantages. \n\nBecause i deploy this website using github pages i have to use the `channel-type: \"post-message\"` which is actually less secure and slower than the default `channel-type: \"shared-array\"`.\n\n```{.yaml filename=\"your_file.qmd\" eval=FALSE}\n---\ntitle: \"Setting Up webR to use the PostMessage Channel\"\nformat: html\nwebr:\n  channel-type: \"post-message\"\nfilters:\n- webr\n---\n```\n\n## Deployment \n\nThe [WebR documentation](https://quarto-webr.thecoatlessprofessor.com/qwebr-deployment-templates.html) gives examples on how to setup WebR for different deployment scenarios like RevealJS, Websites on GitHub Pages, etc.\n\nThere is also a [example Website](https://quarto-webr.thecoatlessprofessor.com/examples/website/) which shows how to setup WebR for a Website. The source code can be found in the [GitHub Repository](https://github.com/coatless/quarto-webr/tree/main/examples/website).\n\nFor troubleshooting later on [here](https://quarto-webr.thecoatlessprofessor.com/qwebr-extension-website.html)\n\n::: {.callout-note icon=\"false\"}\n\n## Create Link in Powershell\n\nThe code provide by the Coatless Professor is for Linux and MacOS. If you want to use it in Windows you have to change the code to `cmd /c mklink /D _extensions ..\\_extensions` assuming you are in the root/docs folder of your quarto project.\n\n:::",
    "supporting": [
      "webr_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}